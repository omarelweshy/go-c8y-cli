// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package extensions

import (
	"sync"
)

// Ensure, that AliasMock does implement Alias.
// If this is not the case, regenerate this file with moq.
var _ Alias = &AliasMock{}

// AliasMock is a mock implementation of Alias.
//
//	func TestSomethingThatUsesAlias(t *testing.T) {
//
//		// make and configure a mocked Alias
//		mockedAlias := &AliasMock{
//			GetCommandFunc: func() string {
//				panic("mock out the GetCommand method")
//			},
//			GetDescriptionFunc: func() string {
//				panic("mock out the GetDescription method")
//			},
//			GetNameFunc: func() string {
//				panic("mock out the GetName method")
//			},
//			IsShellFunc: func() bool {
//				panic("mock out the IsShell method")
//			},
//		}
//
//		// use mockedAlias in code that requires Alias
//		// and then make assertions.
//
//	}
type AliasMock struct {
	// GetCommandFunc mocks the GetCommand method.
	GetCommandFunc func() string

	// GetDescriptionFunc mocks the GetDescription method.
	GetDescriptionFunc func() string

	// GetNameFunc mocks the GetName method.
	GetNameFunc func() string

	// IsShellFunc mocks the IsShell method.
	IsShellFunc func() bool

	// calls tracks calls to the methods.
	calls struct {
		// GetCommand holds details about calls to the GetCommand method.
		GetCommand []struct {
		}
		// GetDescription holds details about calls to the GetDescription method.
		GetDescription []struct {
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
		}
		// IsShell holds details about calls to the IsShell method.
		IsShell []struct {
		}
	}
	lockGetCommand     sync.RWMutex
	lockGetDescription sync.RWMutex
	lockGetName        sync.RWMutex
	lockIsShell        sync.RWMutex
}

// GetCommand calls GetCommandFunc.
func (mock *AliasMock) GetCommand() string {
	if mock.GetCommandFunc == nil {
		panic("AliasMock.GetCommandFunc: method is nil but Alias.GetCommand was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCommand.Lock()
	mock.calls.GetCommand = append(mock.calls.GetCommand, callInfo)
	mock.lockGetCommand.Unlock()
	return mock.GetCommandFunc()
}

// GetCommandCalls gets all the calls that were made to GetCommand.
// Check the length with:
//
//	len(mockedAlias.GetCommandCalls())
func (mock *AliasMock) GetCommandCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCommand.RLock()
	calls = mock.calls.GetCommand
	mock.lockGetCommand.RUnlock()
	return calls
}

// GetDescription calls GetDescriptionFunc.
func (mock *AliasMock) GetDescription() string {
	if mock.GetDescriptionFunc == nil {
		panic("AliasMock.GetDescriptionFunc: method is nil but Alias.GetDescription was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDescription.Lock()
	mock.calls.GetDescription = append(mock.calls.GetDescription, callInfo)
	mock.lockGetDescription.Unlock()
	return mock.GetDescriptionFunc()
}

// GetDescriptionCalls gets all the calls that were made to GetDescription.
// Check the length with:
//
//	len(mockedAlias.GetDescriptionCalls())
func (mock *AliasMock) GetDescriptionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDescription.RLock()
	calls = mock.calls.GetDescription
	mock.lockGetDescription.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *AliasMock) GetName() string {
	if mock.GetNameFunc == nil {
		panic("AliasMock.GetNameFunc: method is nil but Alias.GetName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	mock.lockGetName.Unlock()
	return mock.GetNameFunc()
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//
//	len(mockedAlias.GetNameCalls())
func (mock *AliasMock) GetNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetName.RLock()
	calls = mock.calls.GetName
	mock.lockGetName.RUnlock()
	return calls
}

// IsShell calls IsShellFunc.
func (mock *AliasMock) IsShell() bool {
	if mock.IsShellFunc == nil {
		panic("AliasMock.IsShellFunc: method is nil but Alias.IsShell was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsShell.Lock()
	mock.calls.IsShell = append(mock.calls.IsShell, callInfo)
	mock.lockIsShell.Unlock()
	return mock.IsShellFunc()
}

// IsShellCalls gets all the calls that were made to IsShell.
// Check the length with:
//
//	len(mockedAlias.IsShellCalls())
func (mock *AliasMock) IsShellCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsShell.RLock()
	calls = mock.calls.IsShell
	mock.lockIsShell.RUnlock()
	return calls
}
