// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package extensions

import (
	"sync"
)

// Ensure, that AliasMock does implement Alias.
// If this is not the case, regenerate this file with moq.
var _ Alias = &AliasMock{}

// AliasMock is a mock implementation of Alias.
//
//	func TestSomethingThatUsesAlias(t *testing.T) {
//
//		// make and configure a mocked Alias
//		mockedAlias := &AliasMock{
//			CommandFunc: func() string {
//				panic("mock out the Command method")
//			},
//			DescriptionFunc: func() string {
//				panic("mock out the Description method")
//			},
//			IsShellFunc: func() bool {
//				panic("mock out the IsShell method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedAlias in code that requires Alias
//		// and then make assertions.
//
//	}
type AliasMock struct {
	// CommandFunc mocks the Command method.
	CommandFunc func() string

	// DescriptionFunc mocks the Description method.
	DescriptionFunc func() string

	// IsShellFunc mocks the IsShell method.
	IsShellFunc func() bool

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Command holds details about calls to the Command method.
		Command []struct {
		}
		// Description holds details about calls to the Description method.
		Description []struct {
		}
		// IsShell holds details about calls to the IsShell method.
		IsShell []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockCommand     sync.RWMutex
	lockDescription sync.RWMutex
	lockIsShell     sync.RWMutex
	lockName        sync.RWMutex
}

// Command calls CommandFunc.
func (mock *AliasMock) Command() string {
	if mock.CommandFunc == nil {
		panic("AliasMock.CommandFunc: method is nil but Alias.Command was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCommand.Lock()
	mock.calls.Command = append(mock.calls.Command, callInfo)
	mock.lockCommand.Unlock()
	return mock.CommandFunc()
}

// CommandCalls gets all the calls that were made to Command.
// Check the length with:
//
//	len(mockedAlias.CommandCalls())
func (mock *AliasMock) CommandCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCommand.RLock()
	calls = mock.calls.Command
	mock.lockCommand.RUnlock()
	return calls
}

// Description calls DescriptionFunc.
func (mock *AliasMock) Description() string {
	if mock.DescriptionFunc == nil {
		panic("AliasMock.DescriptionFunc: method is nil but Alias.Description was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDescription.Lock()
	mock.calls.Description = append(mock.calls.Description, callInfo)
	mock.lockDescription.Unlock()
	return mock.DescriptionFunc()
}

// DescriptionCalls gets all the calls that were made to Description.
// Check the length with:
//
//	len(mockedAlias.DescriptionCalls())
func (mock *AliasMock) DescriptionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDescription.RLock()
	calls = mock.calls.Description
	mock.lockDescription.RUnlock()
	return calls
}

// IsShell calls IsShellFunc.
func (mock *AliasMock) IsShell() bool {
	if mock.IsShellFunc == nil {
		panic("AliasMock.IsShellFunc: method is nil but Alias.IsShell was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsShell.Lock()
	mock.calls.IsShell = append(mock.calls.IsShell, callInfo)
	mock.lockIsShell.Unlock()
	return mock.IsShellFunc()
}

// IsShellCalls gets all the calls that were made to IsShell.
// Check the length with:
//
//	len(mockedAlias.IsShellCalls())
func (mock *AliasMock) IsShellCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsShell.RLock()
	calls = mock.calls.IsShell
	mock.lockIsShell.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *AliasMock) Name() string {
	if mock.NameFunc == nil {
		panic("AliasMock.NameFunc: method is nil but Alias.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedAlias.NameCalls())
func (mock *AliasMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}
